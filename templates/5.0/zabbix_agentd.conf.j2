# This is a configuration file for Zabbix agent daemon (Unix)
# To get more information about Zabbix, visit http://www.zabbix.com

############ GENERAL PARAMETERS #################

### Option: PidFile
#	Name of PID file.
#
# Mandatory: no
# Default:
# PidFile=/tmp/zabbix_agentd.pid

PidFile={{ macklus.zabbix.agent.pidfile | default('/var/run/zabbix/zabbix_agentd.pid') }}

### Option: LogType
#	Specifies where log messages are written to:
#		system  - syslog
#		file    - file specified with LogFile parameter
#		console - standard output
#
# Mandatory: no
# Default:
# LogType=file

### Option: LogFile
#	Log file name for LogType 'file' parameter.
#
# Mandatory: yes, if LogType is set to file, otherwise no
# Default:
# LogFile=

LogFile={{ macklus.zabbix.agent.logfile | default('/var/log/zabbix/zabbix_agentd.log') }}

### Option: LogFileSize
#	Maximum size of log file in MB.
#	0 - disable automatic log rotation.
#
# Mandatory: no
# Range: 0-1024
# Default:
# LogFileSize=1

LogFileSize={{ macklus.zabbix.agent.logfilesize | default('0') }}

### Option: DebugLevel
#	Specifies debug level:
#	0 - basic information about starting and stopping of Zabbix processes
#	1 - critical information
#	2 - error information
#	3 - warnings
#	4 - for debugging (produces lots of information)
#	5 - extended debugging (produces even more information)
#
# Mandatory: no
# Range: 0-5
# Default:
DebugLevel={{ macklus.zabbix.agent.debuglevel | default('3') }}

### Option: SourceIP
#	Source IP address for outgoing connections.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.sourceip is defined %}
SourceIP={{ macklus.zabbix.agent.sourceip }}
{% else %}
# SourceIP=
{% endif %}

### Option: AllowKey
#	Allow execution of item keys matching pattern.
#	Multiple keys matching rules may be defined in combination with DenyKey.
#	Key pattern is wildcard expression, which support "*" character to match any number of any characters in certain position. It might be used in both key name and key arguments.
#	Parameters are processed one by one according their appearance order.
#	If no AllowKey or DenyKey rules defined, all keys are allowed.
#
# Mandatory: no
{% if macklus.zabbix.agent.allowkey is defined %}
AllowKey={{ macklus.zabbix.agent.allowkey }}
{% else %}
# AllowKey=system.run[*]
{% endif %}

### Option: DenyKey
#	Deny execution of items keys matching pattern.
#	Multiple keys matching rules may be defined in combination with AllowKey.
#	Key pattern is wildcard expression, which support "*" character to match any number of any characters in certain position. It might be used in both key name and key arguments.
#	Parameters are processed one by one according their appearance order.
#	If no AllowKey or DenyKey rules defined, all keys are allowed.
#       Unless another system.run[*] rule is specified DenyKey=system.run[*] is added by default.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.denykey is defined %}
DenyKey={{ macklus.zabbix.agent.denykey }}
{% else %}
# DenyKey=system.run[*]
{% endif %}

### Option: EnableRemoteCommands - Deprecated, use AllowKey=system.run[*] or DenyKey=system.run[*] instead
#	Internal alias for AllowKey/DenyKey parameters depending on value:
#	0 - DenyKey=system.run[*]
#	1 - AllowKey=system.run[*]
#
# Mandatory: no

### Option: LogRemoteCommands
#	Enable logging of executed shell commands as warnings.
#	0 - disabled
#	1 - enabled
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.enableremotecommands is defined %}
LogRemoteCommands={{ macklus.zabbix.agent.logremotecommands }}
{% else %}
# LogRemoteCommands=0
{% endif %}


##### Passive checks related

### Option: Server
#	List of comma delimited IP addresses, optionally in CIDR notation, or DNS names of Zabbix servers and Zabbix proxies.
#	Incoming connections will be accepted only from the hosts listed here.
#	If IPv6 support is enabled then '127.0.0.1', '::127.0.0.1', '::ffff:127.0.0.1' are treated equally
#	and '::/0' will allow any IPv4 or IPv6 address.
#	'0.0.0.0/0' can be used to allow any IPv4 address.
#	Example: Server=127.0.0.1,192.168.1.0/24,::1,2001:db8::/32,zabbix.example.com
#
# Mandatory: yes, if StartAgents is not explicitly set to 0
# Default:
# Server=

Server={{ macklus.zabbix.agent.server }}

### Option: ListenPort
#	Agent will listen on this port for connections from the server.
#
# Mandatory: no
# Range: 1024-32767
# Default:
{% if macklus.zabbix.agent.listenport is defined %}
ListenPort={{ macklus.zabbix.agent.listenport }}
{% else %}
# ListenPort=10050
{% endif %}

### Option: ListenIP
#	List of comma delimited IP addresses that the agent should listen on.
#	First IP address is sent to Zabbix server if connecting to it to retrieve list of active checks.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.listenip is defined %}
ListenIP={{ macklus.zabbix.agent.listenip }}
{% else %}
# ListenIP=0.0.0.0
{% endif %}

### Option: StartAgents
#	Number of pre-forked instances of zabbix_agentd that process passive checks.
#	If set to 0, disables passive checks and the agent will not listen on any TCP port.
#
# Mandatory: no
# Range: 0-100
# Default:
{% if macklus.zabbix.agent.startagents is defined %}
StartAgents={{ macklus.zabbix.agent.startagents }}
{% else %}
# StartAgents=3
{% endif %}

##### Active checks related

### Option: ServerActive
#	List of comma delimited IP:port (or DNS name:port) pairs of Zabbix servers and Zabbix proxies for active checks.
#	If port is not specified, default port is used.
#	IPv6 addresses must be enclosed in square brackets if port for that host is specified.
#	If port is not specified, square brackets for IPv6 addresses are optional.
#	If this parameter is not specified, active checks are disabled.
#	Example: ServerActive=127.0.0.1:20051,zabbix.domain,[::1]:30051,::1,[12fc::1]
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.serveractive is defined %}
ServerActive={{ macklus.zabbix.agent.serveractive }}
{% else %}
# ServerActive=
{% endif %}

### Option: Hostname
#	Unique, case sensitive hostname.
#	Required for active checks and must match hostname as configured on the server.
#	Value is acquired from HostnameItem if undefined.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.hostname is defined %}
Hostname={{ macklus.zabbix.agent.hostname }}
{% else %}
# Hostname=
{% endif %}


### Option: HostnameItem
#	Item used for generating Hostname if it is undefined. Ignored if Hostname is defined.
#	Does not support UserParameters or aliases.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.hostnameitem is defined %}
HostnameItem={{ macklus.zabbix.agent.hostnameitem }}
{% else %}
# HostnameItem=system.hostname
{% endif %}

### Option: HostMetadata
#	Optional parameter that defines host metadata.
#	Host metadata is used at host auto-registration process.
#	An agent will issue an error and not start if the value is over limit of 255 characters.
#	If not defined, value will be acquired from HostMetadataItem.
#
# Mandatory: no
# Range: 0-255 characters
# Default:
{% if macklus.zabbix.agent.hostmetadata is defined %}
HostMetadata={{ macklus.zabbix.agent.hostmetadata }}
{% else %}
# HostMetadata=
{% endif %}

### Option: HostMetadataItem
#	Optional parameter that defines an item used for getting host metadata.
#	Host metadata is used at host auto-registration process.
#	During an auto-registration request an agent will log a warning message if
#	the value returned by specified item is over limit of 255 characters.
#	This option is only used when HostMetadata is not defined.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.hostmetadataitem is defined %}
HostMetadataItem={{ macklus.zabbix.agent.hostmetadataitem }}
{% else %}
# HostMetadataItem=
{% endif %}

### Option: HostInterface
#	Optional parameter that defines host interface.
#	Host interface is used at host auto-registration process.
#	An agent will issue an error and not start if the value is over limit of 255 characters.
#	If not defined, value will be acquired from HostInterfaceItem.
#
# Mandatory: no
# Range: 0-255 characters
# Default:
{% if macklus.zabbix.agent.hostinterface is defined %}
HostInterface={{ macklus.zabbix.agent.hostinterface }}
{% else %}
# HostInterface=
{% endif %}

### Option: HostInterfaceItem
#	Optional parameter that defines an item used for getting host interface.
#	Host interface is used at host auto-registration process.
#	During an auto-registration request an agent will log a warning message if
#	the value returned by specified item is over limit of 255 characters.
#	This option is only used when HostInterface is not defined.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.hostinterfaceitem is defined %}
HostInterfaceItem={{ macklus.zabbix.agent.hostinterfaceitem }}
{% else %}
# HostInterfaceItem=
{% endif %}

### Option: RefreshActiveChecks
#	How often list of active checks is refreshed, in seconds.
#
# Mandatory: no
# Range: 60-3600
# Default:
{% if macklus.zabbix.agent.refreshactivechecks is defined %}
RefreshActiveChecks={{ macklus.zabbix.agent.refreshactivechecks }}
{% else %}
# RefreshActiveChecks=120
{% endif %}

### Option: BufferSend
#	Do not keep data longer than N seconds in buffer.
#
# Mandatory: no
# Range: 1-3600
# Default:
{% if macklus.zabbix.agent.buffersend is defined %}
BufferSend={{ macklus.zabbix.agent.buffersend }}
{% else %}
# BufferSend=5
{% endif %}

### Option: BufferSize
#	Maximum number of values in a memory buffer. The agent will send
#	all collected data to Zabbix Server or Proxy if the buffer is full.
#
# Mandatory: no
# Range: 2-65535
# Default:
# BufferSize=100
{% if macklus.zabbix.agent.buffersize is defined %}
BufferSize={{ macklus.zabbix.agent.buffersize }}
{% else %}
# BufferSize=100
{% endif %}

### Option: MaxLinesPerSecond
#	Maximum number of new lines the agent will send per second to Zabbix Server
#	or Proxy processing 'log' and 'logrt' active checks.
#	The provided value will be overridden by the parameter 'maxlines',
#	provided in 'log' or 'logrt' item keys.
#
# Mandatory: no
# Range: 1-1000
# Default:
{% if macklus.zabbix.agent.maxlinespersecond is defined %}
MaxLinesPerSecond={{ macklus.zabbix.agent.maxlinespersecond }}
{% else %}
# MaxLinesPerSecond=20
{% endif %}

############ ADVANCED PARAMETERS #################

### Option: Alias
#	Sets an alias for an item key. It can be used to substitute long and complex item key with a smaller and simpler one.
#	Multiple Alias parameters may be present. Multiple parameters with the same Alias key are not allowed.
#	Different Alias keys may reference the same item key.
#	For example, to retrieve the ID of user 'zabbix':
#	Alias=zabbix.userid:vfs.file.regexp[/etc/passwd,^zabbix:.:([0-9]+),,,,\1]
#	Now shorthand key zabbix.userid may be used to retrieve data.
#	Aliases can be used in HostMetadataItem but not in HostnameItem parameters.
#
# Mandatory: no
# Range:
# Default:

### Option: Timeout
#	Spend no more than Timeout seconds on processing
#
# Mandatory: no
# Range: 1-30
# Default:
{% if macklus.zabbix.agent.maxlinespersecond is defined %}
Timeout={{ macklus.zabbix.agent.timeout }}
{% else %}
# Timeout=3
{% endif %}

### Option: AllowRoot
#	Allow the agent to run as 'root'. If disabled and the agent is started by 'root', the agent
#	will try to switch to the user specified by the User configuration option instead.
#	Has no effect if started under a regular user.
#	0 - do not allow
#	1 - allow
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.allowroot is defined %}
AllowRoot={{ macklus.zabbix.agent.allowroot }}
{% else %}
# AllowRoot=0
{% endif %}

### Option: User
#	Drop privileges to a specific, existing user on the system.
#	Only has effect if run as 'root' and AllowRoot is disabled.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.user is defined %}
User={{ macklus.zabbix.agent.user }}
{% else %}
# User=zabbix
{% endif %}

### Option: Include
#	You may include individual files or all files in a directory in the configuration file.
#	Installing Zabbix will create include directory in /usr/local/etc, unless modified during the compile time.
#
# Mandatory: no
# Default:
# Include=

Include=/etc/zabbix/zabbix_agentd.d/*.conf

# Include=/usr/local/etc/zabbix_agentd.userparams.conf
# Include=/usr/local/etc/zabbix_agentd.conf.d/
# Include=/usr/local/etc/zabbix_agentd.conf.d/*.conf

####### USER-DEFINED MONITORED PARAMETERS #######

### Option: UnsafeUserParameters
#	Allow all characters to be passed in arguments to user-defined parameters.
#	The following characters are not allowed:
#	\ ' " ` * ? [ ] { } ~ $ ! & ; ( ) < > | # @
#	Additionally, newline characters are not allowed.
#	0 - do not allow
#	1 - allow
#
# Mandatory: no
# Range: 0-1
# Default:
{% if macklus.zabbix.agent.unsafeuserparameters is defined %}
UnsafeUserParameters={{ macklus.zabbix.agent.unsafeuserparameters }}
{% else %}
# UnsafeUserParameters=0
{% endif %}

### Option: UserParameter
#	User-defined parameter to monitor. There can be several user-defined parameters.
#	Format: UserParameter=<key>,<shell command>
#	See 'zabbix_agentd' directory for examples.
#
# Mandatory: no
# Default:
# UserParameter=

####### LOADABLE MODULES #######

### Option: LoadModulePath
#	Full path to location of agent modules.
#	Default depends on compilation options.
#	To see the default path run command "zabbix_agentd --help".
#
# Mandatory: no
# Default:
# LoadModulePath=${libdir}/modules

### Option: LoadModule
#	Module to load at agent startup. Modules are used to extend functionality of the agent.
#	Formats:
#		LoadModule=<module.so>
#		LoadModule=<path/module.so>
#		LoadModule=</abs_path/module.so>
#	Either the module must be located in directory specified by LoadModulePath or the path must precede the module name.
#	If the preceding path is absolute (starts with '/') then LoadModulePath is ignored.
#	It is allowed to include multiple LoadModule parameters.
#
# Mandatory: no
# Default:
# LoadModule=

####### TLS-RELATED PARAMETERS #######

### Option: TLSConnect
#	How the agent should connect to server or proxy. Used for active checks.
#	Only one value can be specified:
#		unencrypted - connect without encryption
#		psk         - connect using TLS and a pre-shared key
#		cert        - connect using TLS and a certificate
#
# Mandatory: yes, if TLS certificate or PSK parameters are defined (even for 'unencrypted' connection)
# Default:
{% if macklus.zabbix.agent.tlsconnect is defined %}
TLSConnect={{ macklus.zabbix.agent.tlsconnect }}
{% else %}
# TLSConnect=unencrypted
{% endif %}

### Option: TLSAccept
#	What incoming connections to accept.
#	Multiple values can be specified, separated by comma:
#		unencrypted - accept connections without encryption
#		psk         - accept connections secured with TLS and a pre-shared key
#		cert        - accept connections secured with TLS and a certificate
#
# Mandatory: yes, if TLS certificate or PSK parameters are defined (even for 'unencrypted' connection)
# Default:
{% if macklus.zabbix.agent.tlsaccept is defined %}
TLSAccept={{ macklus.zabbix.agent.tlsaccept }}
{% else %}
# TLSAccept=unencrypted
{% endif %}

### Option: TLSCAFile
#	Full pathname of a file containing the top-level CA(s) certificates for
#	peer certificate verification.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.tlscafile is defined %}
TLSCAFile={{ macklus.zabbix.agent.tlscafile }}
{% else %}
# TLSCAFile=
{% endif %}

### Option: TLSCRLFile
#	Full pathname of a file containing revoked certificates.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.tlscrlfile is defined %}
TLSCRLFile={{ macklus.zabbix.agent.tlscrlfile }}
{% else %}
# TLSCRLFile=
{% endif %}

### Option: TLSServerCertIssuer
#		Allowed server certificate issuer.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.tlsservercertissuer is defined %}
TLSServerCertIssuer={{ macklus.zabbix.agent.tlsservercertissuer }}
{% else %}
# TLSServerCertIssuer=
{% endif %}

### Option: TLSServerCertSubject
#		Allowed server certificate subject.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.tlsservercertsubject is defined %}
TLSServerCertSubject={{ macklus.zabbix.agent.tlsservercertsubject }}
{% else %}
# TLSServerCertSubject=
{% endif %}

### Option: TLSCertFile
#	Full pathname of a file containing the agent certificate or certificate chain.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.tlscertfile is defined %}
TLSCertFile={{ macklus.zabbix.agent.tlscertfile }}
{% else %}
# TLSCertFile=
{% endif %}

### Option: TLSKeyFile
#	Full pathname of a file containing the agent private key.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.tlskeyfile is defined %}
TLSKeyFile={{ macklus.zabbix.agent.tlskeyfile }}
{% else %}
# TLSKeyFile=
{% endif %}

### Option: TLSPSKIdentity
#	Unique, case sensitive string used to identify the pre-shared key.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.tlspskidentity is defined %}
TLSPSKIdentity={{ macklus.zabbix.agent.tlspskidentity }}
{% else %}
# TLSPSKIdentity=
{% endif %}

### Option: TLSPSKFile
#	Full pathname of a file containing the pre-shared key.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.tlspskfile is defined %}
TLSPSKFile={{ macklus.zabbix.agent.tlspskfile }}
{% else %}
# TLSPSKFile=
{% endif %}

####### For advanced users - TLS ciphersuite selection criteria #######

### Option: TLSCipherCert13
#	Cipher string for OpenSSL 1.1.1 or newer in TLS 1.3.
#	Override the default ciphersuite selection criteria for certificate-based encryption.
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.tlsciphercert13 is defined %}
TLSCipherCert13={{ macklus.zabbix.agent.tlsciphercert13 }}
{% else %}
# TLSCipherCert13=
{% endif %}

### Option: TLSCipherCert
#	GnuTLS priority string or OpenSSL (TLS 1.2) cipher string.
#	Override the default ciphersuite selection criteria for certificate-based encryption.
#	Example for GnuTLS:
#		NONE:+VERS-TLS1.2:+ECDHE-RSA:+RSA:+AES-128-GCM:+AES-128-CBC:+AEAD:+SHA256:+SHA1:+CURVE-ALL:+COMP-NULL:+SIGN-ALL:+CTYPE-X.509
#	Example for OpenSSL:
#		EECDH+aRSA+AES128:RSA+aRSA+AES128
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.tlsciphercert is defined %}
TLSCipherCert={{ macklus.zabbix.agent.tlsciphercert }}
{% else %}
# TLSCipherCert=
{% endif %}

### Option: TLSCipherPSK13
#	Cipher string for OpenSSL 1.1.1 or newer in TLS 1.3.
#	Override the default ciphersuite selection criteria for PSK-based encryption.
#	Example:
#		TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.tlscipherpsk13 is defined %}
TLSCipherPSK13={{ macklus.zabbix.agent.tlscipherpsk13 }}
{% else %}
# TLSCipherPSK13=
{% endif %}

### Option: TLSCipherPSK
#	GnuTLS priority string or OpenSSL (TLS 1.2) cipher string.
#	Override the default ciphersuite selection criteria for PSK-based encryption.
#	Example for GnuTLS:
#		NONE:+VERS-TLS1.2:+ECDHE-PSK:+PSK:+AES-128-GCM:+AES-128-CBC:+AEAD:+SHA256:+SHA1:+CURVE-ALL:+COMP-NULL:+SIGN-ALL
#	Example for OpenSSL:
#		kECDHEPSK+AES128:kPSK+AES128
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.tlscipherpsk is defined %}
TLSCipherPSK={{ macklus.zabbix.agent.tlscipherpsk }}
{% else %}
# TLSCipherPSK=
{% endif %}

### Option: TLSCipherAll13
#	Cipher string for OpenSSL 1.1.1 or newer in TLS 1.3.
#	Override the default ciphersuite selection criteria for certificate- and PSK-based encryption.
#	Example:
#		TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.tlscipherall13 is defined %}
TLSCipherAll13={{ macklus.zabbix.agent.tlscipherall13 }}
{% else %}
# TLSCipherAll13=
{% endif %}

### Option: TLSCipherAll
#	GnuTLS priority string or OpenSSL (TLS 1.2) cipher string.
#	Override the default ciphersuite selection criteria for certificate- and PSK-based encryption.
#	Example for GnuTLS:
#		NONE:+VERS-TLS1.2:+ECDHE-RSA:+RSA:+ECDHE-PSK:+PSK:+AES-128-GCM:+AES-128-CBC:+AEAD:+SHA256:+SHA1:+CURVE-ALL:+COMP-NULL:+SIGN-ALL:+CTYPE-X.509
#	Example for OpenSSL:
#		EECDH+aRSA+AES128:RSA+aRSA+AES128:kECDHEPSK+AES128:kPSK+AES128
#
# Mandatory: no
# Default:
{% if macklus.zabbix.agent.tlscipherall is defined %}
TLSCipherAll={{ macklus.zabbix.agent.tlscipherall }}
{% else %}
# TLSCipherAll=
{% endif %}
